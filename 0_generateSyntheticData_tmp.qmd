---
title: "Synthetic Data Generation"
author: "Tamas Foldes"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true
    toc_depth: 2 # Optional: Set the depth of the table of contents
    toc_float: true # Optional: Floating TOC
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```

## Prepare Panel data

```{r}

set.seed(8675309)
target_n <- 1000
diaryWaves <- 30
panelWaves <- 6
studyDays <- 100
studyStartDate <- as_datetime("2024-08-20 00:00:00")
```

### Generate PIDs

```{r pid-1, cache=TRUE}
# generate 1000 10-digit random string that are unique and store as a vector
set.seed(123)
# Set the target number of observations per wave


platform_pids <- replicate(1000, paste(sample(0:9, 10, replace = TRUE), collapse = ""))

library(tidyverse)
library(readr)
library(tibble)

filepath <- "raw/Platform+3+-+Panel_August+19,+2024_20.45/Platform 3 - Panel_August 19, 2024_20.45.csv"
# Step 1: Read the first row to get the column names
column_names <- read_csv(filepath, n_max = 1, col_names = FALSE) %>%
  as.character()

# Step 2: Read the second row to get the descriptions
column_descriptions <- read_csv(filepath, skip = 1, n_max = 1, col_names = FALSE) %>%
  as.character()

# Step 3: Read the actual data, skipping the first two rows
panel <- read_csv(filepath, skip = 3, col_names = column_names)

# Step 4: Attach descriptions as metadata (as an attribute)
attr(panel, "column_descriptions") <- column_descriptions

# Convert to tibble
panel_tibble <- as_tibble(panel)

# count how many observations are there per wave
panel_tibble %>%
  group_by(wave) %>%
  summarise(n = n())

library(dplyr)

# Randomly drop observations from each wave
panel_balanced <- panel_tibble %>%
  group_by(wave) %>%
  # For each wave, sample `target_n` observations without replacement
  sample_n(size = target_n)

# Verify that each wave has the correct number of observations
panel_balanced %>%
  group_by(wave) %>%
  summarise(n = n())
```

### Allocate PIDs

```{r pid-2, cache=TRUE}
library(dplyr)

# Create unique PIDs for each participant
platform_pids <- replicate(target_n, paste(sample(0:9, 10, replace = TRUE), collapse = ""))

# Assign PIDs using a loop
panel_balanced <- panel_balanced %>%
  arrange(wave)

for (i in 1:panelWaves) {
  # Calculate the start and end indices for each wave
  start_index <- (i - 1) * target_n + 1
  end_index <- i * target_n
  
  # Assign PIDs to each wave
  panel_balanced$PID[start_index:end_index] <- platform_pids
}

# Verify that each participant has data for each wave
panel_balanced %>%
  group_by(PID, wave) %>%
  summarise(n = n()) %>%
  ungroup() %>%
  arrange(PID, wave)


# Calculate the current earliest StartDate
currentEarliestDate <- min(panel_balanced$StartDate, na.rm = TRUE)

# Calculate the difference in days and round it
dateDifference <- round(as.numeric(difftime(studyStartDate, currentEarliestDate, units = "days")))

# Shift the StartDate and EndDate
panel_balanced <- panel_balanced %>%
    mutate(
        StartDate = StartDate + days(dateDifference),
        EndDate = EndDate + days(dateDifference)
    )

# Glimpse the updated tibble
glimpse(panel_balanced)

#save the data to synthetic-data as RDS
saveRDS(panel_balanced, "synthetic-data/panel_balanced.rds")
```

## Prepare Diary data

```{r diary-1, cache=TRUE}
number_of_diary_days <- diaryWaves

library(tidyverse)
library(readr)
library(tibble)

filepath <- "raw/Platform+2+-+Diary_August+19,+2024_14.19/Platform 2 - Diary_August 19, 2024_14.19.csv"
# Step 1: Read the first row to get the column names
column_names <- read_csv(filepath, n_max = 1, col_names = FALSE) %>%
  as.character()

# Step 2: Read the second row to get the descriptions
column_descriptions <- read_csv(filepath, skip = 1, n_max = 1, col_names = FALSE) %>%
  as.character()

# Step 3: Read the actual data, skipping the first two rows
diary <- read_csv(filepath, skip = 3, col_names = column_names)

# Step 4: Attach descriptions as metadata (as an attribute)
attr(diary, "column_descriptions") <- column_descriptions

# Convert to tibble
diary_tibble <- as_tibble(diary)

# count how many observations are there per wave
diary_tibble %>%
  group_by(wave) %>%
  summarise(n = n())

```

```{r diary-2, cache=TRUE}
# Assuming you have 'panel_balanced' and 'diary_tibble' dataframes

# Get unique PIDs
unique_pids <- unique(panel_balanced$PID)

# Function to sample for a single PID
sample_for_pid <- function(pid, number_of_diary_days, diary_tibble) {
  sampled_rows <- diary_tibble[sample(nrow(diary_tibble), number_of_diary_days), ]
  sampled_rows$PID <- pid
  sampled_rows$wave <- 1:number_of_diary_days
  return(sampled_rows)
}

# Apply the function to each unique PID
sampled_data <- lapply(unique_pids, 
                      sample_for_pid, 
                      number_of_diary_days = number_of_diary_days,  # Replace with your actual value
                      diary_tibble = diary_tibble)

# Combine the results into a single dataframe
diary_tibble_sampled <- do.call(rbind, sampled_data)
# count how many observations are there per wave
diary_tibble_sampled %>%
  group_by(wave) %>%
  summarise(n = n())


# Calculate the current earliest session start date
currentEarliestDate <- min(diary_tibble_sampled$StartDate, na.rm = TRUE)

# Calculate the difference in days
dateDifference <- round(as.numeric(difftime(studyStartDate, currentEarliestDate, units = "days")))

# Shift the sessionStart and sessionEnd dates
diary_tibble_sampled <- diary_tibble_sampled %>%
    mutate(
        StartDate = StartDate + days(dateDifference),
        EndDate = EndDate + days(dateDifference)
    )

# export the data to synthetic-data as RDS
saveRDS(diary_tibble_sampled, "synthetic-data/diary_balanced.rds")
```

## Prepare Steam Data

```{r steam, cache=TRUE}

library(dplyr)
library(readr)
library(progress)

# Read the steam data
number_of_days_with_steam_data<-10
number_of_steam_players <- 250
steam_filepath <- "raw/steam_updated_reshaped_file.csv" # Replace with your actual path
steam_tibble <- read_csv(steam_filepath, show_col_types = FALSE)
# filter rows where played is No
steam_tibble <- steam_tibble %>%
  filter(played == "Yes")

# Ensure steam_tibble is grouped by ID
steam_tibble_grouped <- steam_tibble %>%
  group_by(ID)

# Get unique PIDs from panel_balanced
unique_pids <- unique(panel_balanced$PID)

# Initialize an empty tibble to store the results
sampled_tibble <- tibble()

# Create a progress bar
pb <- progress_bar$new(
  format = "  Sampling [:bar] :percent in :elapsed",
  total = length(unique_pids[1:number_of_steam_players]), clear = FALSE, width = 60
)

# Iterate through each unique PID and sample 10 observations
for (pid in unique_pids[1:number_of_steam_players]) {
  # Sample 10 observations from steam_tibble for each ID
  sampled_data <- steam_tibble_grouped %>%
    group_modify(~ sample_n(.x, size = number_of_days_with_steam_data, replace = TRUE)) %>%
    mutate(
      PID = pid,
      days_since_study_start = sample(1:studyDays, size = number_of_days_with_steam_data, replace = FALSE),
      # add days_since_study_start to studyStartDate
      date = studyStartDate + days(days_since_study_start - 1)
    )
  
  # Append the sampled data to the result tibble
  sampled_tibble <- bind_rows(sampled_tibble, sampled_data)
  
  # Update the progress bar
  pb$tick()
}

# remove ID column
sampled_tibble <- sampled_tibble %>%
  select(-ID)
# rename the time column to time_hh
sampled_tibble <- sampled_tibble %>%
  rename(time_hh = time, minutes_played = minutes, game_title=Name) %>% mutate(platform = "Steam")


# Add descriptors to each column
comment(sampled_tibble$time_hh) <- "Hour of the day when the game was played/was sampled"
comment(sampled_tibble$played) <- "Indicates if a game was played (Yes/No)"
comment(sampled_tibble$genre) <- "Genre of the game the game played"
comment(sampled_tibble$minutes_played) <- "Total minutes played"
comment(sampled_tibble$AppID) <- "Unique application ID for the game within Steam"
comment(sampled_tibble$game_title) <- "Title of the game"
comment(sampled_tibble$PID) <- "Participant ID"
comment(sampled_tibble$days_since_study_start) <- "Days since the start of the study"

# repace played with logical
sampled_tibble$played <- sampled_tibble$played == "Yes"

# save the data to synthetic-data as RDS
saveRDS(sampled_tibble, "synthetic-data/steam_balanced.rds")
```

## Prepare Nintendo Data

```{r nintendo, cache=TRUE}
library(dplyr)
library(readr)
library(progress)

# Assuming panel_balanced is already loaded and contains a column named PID
# Read the Nintendo data
number_of_session_with_nintendo_data <- 10
number_of_nintendo_players <- 250
nintendo_filepath <- "raw/nintendo_telemetry.csv" # Replace with your actual path
nintendo_tibble <- read_csv(nintendo_filepath, show_col_types = FALSE)
nintendo_metadata <- read_csv("raw/nintendo_metadata.csv", show_col_types = FALSE)             

# Left join the metadata to the nintendo_tibble by NoAname == titleID, adding the genre column
nintendo_tibble <- left_join(nintendo_tibble, nintendo_metadata %>% select(NoAname, genres), by = c("titleID" = "NoAname"))

# Rename pid to id
nintendo_tibble <- nintendo_tibble %>%
    rename(id = pid)

# Create a progress bar
pb <- progress_bar$new(total = length(unique(panel_balanced$PID)))

# Initialize an empty tibble to store the results
sampled_tibble <- tibble()

nintendo_user_startindex <- 100
nintend_user_endindex <- 100 + number_of_nintendo_players

# Iterate through each unique PID in panel_balanced
for (pid in unique(panel_balanced$PID[nintendo_user_startindex:nintend_user_endindex])) {
    # Randomly sample a user from nintendo_tibble
    sampled_user <- nintendo_tibble %>%
        group_by(id) %>%
        filter(n() >= number_of_session_with_nintendo_data) %>%
        ungroup() %>%
        sample_n(1) %>%
        pull(id)
    
    # Get all sessions for the sampled user
    sampled_sessions <- nintendo_tibble %>%
        filter(id == sampled_user)
    
    # Assign the sampled sessions to the current PID
    sampled_sessions <- sampled_sessions %>%
        mutate(PID = pid) %>% select(-id)
    
    # Bind the sampled sessions to the results tibble
    sampled_tibble <- bind_rows(sampled_tibble, sampled_sessions)
    
    # Update the progress bar
    pb$tick()
}

# Rename duration to duration_min
sampled_tibble <- sampled_tibble %>%
    rename(duration_min = duration) %>% mutate(platform = "Nintendo")

# Calculate the current earliest session start date
currentEarliestDate <- min(sampled_tibble$sessionStart, na.rm = TRUE)

# Calculate the difference in days
dateDifference <- round(as.numeric(difftime(studyStartDate, currentEarliestDate, units = "days")))

# Shift the sessionStart and sessionEnd dates
sampled_tibble <- sampled_tibble %>%
    mutate(
        sessionStart = sessionStart + days(dateDifference),
        sessionEnd = sessionEnd + days(dateDifference)
    )

# Glimpse the resulting sampled tibble
glimpse(sampled_tibble)

# Add comments to each column
comment(sampled_tibble$titleID) <- "The title of the game played during the session."
comment(sampled_tibble$sessionStart) <- "The start time of the gaming session."
comment(sampled_tibble$sessionEnd) <- "The end time of the gaming session."
comment(sampled_tibble$duration_min) <- "The duration of the gaming session in minutes."
comment(sampled_tibble$deviceType) <- "The type of device used for the gaming session."
comment(sampled_tibble$operationMode) <- "The mode of operation during the session (e.g., Handheld, TV Docked)."
comment(sampled_tibble$genres) <- "The genre(s) of the game played, if available."
comment(sampled_tibble$PID) <- "The unique identifier for the user in the panel."

# save the data to synthetic-data as RDS
saveRDS(sampled_tibble, "synthetic-data/nintendo_balanced.rds")

```

## Prepare XBOX Data

```{r xbox, cache=TRUE}
# read tab delimited file oii_data_2022_07_01.txt
xbox_tibble <- read_tsv("raw/oii_data_2022_07_01.txt")

library(dplyr)
library(lubridate)

xbox_tibble <- xbox_tibble %>%
    mutate(
        DateId = ymd(as.character(DateId)),  # Convert DateId to Date
        SessionStartTime = mdy_hms(SessionStartTime),  # Convert SessionStartTime to POSIXct
        SessionEndTime = mdy_hms(SessionEndTime)       # Convert SessionEndTime to POSIXct
    )

# filter rows where either SessionStartTime or SessionEndTime is NA
xbox_tibble <- xbox_tibble %>%
    filter(!is.na(SessionStartTime) & !is.na(SessionEndTime))

# Glimpse the updated tibble
glimpse(xbox_tibble)

library(dplyr)
library(readr)
library(progress)

# Assuming panel_balanced is already loaded and contains a column named PID
# Read the Nintendo data
number_of_session_with_xbox_data <- 5
number_of_xbox_players <- 250


# Rename pid to id
xbox_tibble <- xbox_tibble %>%
    rename(id = ParticipantId)

# Create a progress bar
pb <- progress_bar$new(total = length(unique(panel_balanced$PID)))

# Initialize an empty tibble to store the results
sampled_tibble <- tibble()

xbox_user_startindex <- 200
xbox_user_endindex <- 200 + number_of_xbox_players

# Iterate through each unique PID in panel_balanced
for (pid in unique(panel_balanced$PID[xbox_user_startindex:xbox_user_endindex])) {
    # Randomly sample a user from xbox_tibble
    sampled_user <- xbox_tibble %>%
        group_by(id) %>%
        filter(n() >= number_of_session_with_xbox_data) %>%
        ungroup() %>%
        sample_n(1) %>%
        pull(id)
    
    # Get all sessions for the sampled user
    sampled_sessions <- xbox_tibble %>%
        filter(id == sampled_user)
    
    # Assign the sampled sessions to the current PID
    sampled_sessions <- sampled_sessions %>%
        mutate(PID = pid) %>% select(-id)
    
    # Bind the sampled sessions to the results tibble
    sampled_tibble <- bind_rows(sampled_tibble, sampled_sessions)
    
    # Update the progress bar
    pb$tick()
}

# Rename duration to duration_min
sampled_tibble <- sampled_tibble %>%
    mutate(
        duration_min = as.numeric(SessionEndTime-SessionStartTime) / 60,  # Convert duration from seconds to minutes
        platform = "XBOX"
    )

# Calculate the current earliest session start date
currentEarliestDate <- min(sampled_tibble$SessionStartTime, na.rm = TRUE)

# Calculate the difference in days
dateDifference <- round(as.numeric(difftime(studyStartDate, currentEarliestDate, units = "days")))

# Shift the sessionStart and sessionEnd dates
sampled_tibble <- sampled_tibble %>%
    mutate(
        SessionStartTime = SessionStartTime + days(dateDifference),
        SessionEndTime = SessionEndTime + days(dateDifference)
    )

# Add comments to each column
comment(sampled_tibble$DateId) <- "Month start date in the form of YYYYMMDD"
comment(sampled_tibble$GameId) <- "Hashed GameNames in case this is 3rd party titles"
comment(sampled_tibble$PublisherId) <- "Hashed Publisher name in case this is 3rd Party"
comment(sampled_tibble$Genre) <- "Primary genre of the title"
comment(sampled_tibble$SessionStartTime) <- "Session start time stamp"
comment(sampled_tibble$SessionEndTime) <- "Session end time stamp"
comment(sampled_tibble$PID) <- "Internal UserId"
comment(sampled_tibble$duration_min) <- "Duration of the session in minutes"
comment(sampled_tibble$platform) <- "Platform used for the session"


# Glimpse the resulting sampled tibble
glimpse(sampled_tibble)

# save the data to synthetic-data as RDS
saveRDS(sampled_tibble, "synthetic-data/xbox_balanced.rds")

```

## Glimpse

```{r}
# load the data
steam_tibble <- readRDS("synthetic-data/steam_balanced.rds")
nintendo_tibble <- readRDS("synthetic-data/nintendo_balanced.rds")
xbox_tibble <- readRDS("synthetic-data/xbox_balanced.rds")
panel_balanced <- readRDS("synthetic-data/panel_balanced.rds")
diary_balanced <- readRDS("synthetic-data/diary_balanced.rds")

print("Panel \n")
glimpse(panel_balanced)
print("Diary \n")
glimpse(diary_balanced)
print("Steam \n")
glimpse(steam_tibble)
print("Nintendo \n")
glimpse(nintendo_tibble)
print("XBOX \n")
glimpse(xbox_tibble)
```
